"""
Django settings for project_tags project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import json
import os
from pathlib import Path

import django


def get_env_variable(var_name):
    """Get the environment variable or return exception"""
    try:
        return os.environ[var_name]
    except KeyError:
        error_msg = f"Set the {var_name} environment variable"
        raise django.core.exceptions.ImproperlyConfigured(error_msg)


def get_config_variable(var_name, config):
    if var_name not in config:
        error_msg = f"variable {var_name} not in config file"
        raise django.core.exceptions.ImproperlyConfigured(error_msg)


config_source_mode = json.loads(open("config.json").read()).get("config_source_mode", "env")

if config_source_mode == "env":
    CONFIG = {}
    TAGGING_CONFIG = {}
    CONFIG["aws_dynamodb_url"] = get_env_variable("AWS_DYNAMODB_URL")
    CONFIG["aws_default_region"] = get_env_variable("AWS_DEFAULT_REGION")
    CONFIG["db_collection_projects"] = get_env_variable("ENV_SOLUTION_DB_COLLECTION")
    CONFIG["tagging_config_path"] = get_env_variable("ENV_SOLUTION_TAGGING_CONFIG_PATH")
    CONFIG["skip_skills_path"] = get_env_variable("ENV_SOLUTION_SKIP_SKILLS_PATH")
    CONFIG["auth0_url"] = get_env_variable("ENV_AUTH0_URL")
    CONFIG["auth0_audience"] = get_env_variable("ENV_AUTH0_AUDIENCE")
    CONFIG["token_cache_time"] = int(get_env_variable("ENV_TOKEN_CACHE_TIME"))
    CONFIG["auth0_client_id"] = get_env_variable("ENV_AUTH0_CLIENT_ID")
    CONFIG["auth0_client_secret"] = get_env_variable("ENV_AUTH0_CLIENT_SECRET")
    CONFIG["busapi_url"] = get_env_variable("ENV_BUSAPI_URL")
    CONFIG["kafka_error_topic"] = get_env_variable("ENV_KAFKA_ERROR_TOPIC")
    CONFIG["auth0_proxy_server_url"] = get_env_variable("ENV_AUTH0_PROXY_SERVER_URL")
    CONFIG["project_base_url"] = get_env_variable("ENV_BASE_URL")
    TAGGING_CONFIG["api_base_url"] = get_env_variable("ENV_TAGGING_API_BASE_URL")
    TAGGING_CONFIG["tagging_emsi_type"] = get_env_variable("ENV_TAGGING_TAGGING_EMSI_TYPE")
    TAGGING_CONFIG["enable_custom_tagging"] = eval(
        get_env_variable("ENV_TAGGING_ENABLE_CUSTOM_TAGGING")
    )
    TAGGING_CONFIG["update_local_before_tagging"] = eval(
        get_env_variable("ENV_TAGGING_UPDATE_LOCAL_BEFORE_TAGGING")
    )
    TAGGING_CONFIG["extract_confidence"] = eval(get_env_variable("ENV_TAGGING_EXTRACT_CONFIDENCE"))
    TAGGING_CONFIG["text_length"] = int(get_env_variable("ENV_TAGGING_TEXT_LENGTH"))
    print("All variables loaded from the Environment!")
elif config_source_mode == "local_json":
    CONFIG_FILE = "solution_config.json"
    CONFIG = json.loads(open(CONFIG_FILE).read())
    get_config_variable("aws_dynamodb_url", CONFIG)
    get_config_variable("aws_default_region", CONFIG)
    get_config_variable("db_collection_projects", CONFIG)
    get_config_variable("tagging_config_path", CONFIG)
    get_config_variable("skip_skills_path", CONFIG)

    tagging_config_path = CONFIG["tagging_config_path"]
    with open(tagging_config_path) as fp:
        TAGGING_CONFIG = json.load(fp)
    get_config_variable("api_base_url", TAGGING_CONFIG)
    get_config_variable("tagging_emsi_type", TAGGING_CONFIG)
    get_config_variable("enable_custom_tagging", TAGGING_CONFIG)
    get_config_variable("update_local_before_tagging", TAGGING_CONFIG)
    get_config_variable("extract_confidence", TAGGING_CONFIG)
    get_config_variable("text_length", TAGGING_CONFIG)
    print("All variables loaded from the Config Files!")

else:
    raise django.core.exceptions.ImproperlyConfigured("Incorrect Configuration")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "rf7-r!tb)s7)c&vpmu5dupc(@zxzlg0@!$jckp4q*)hzhg&!ap"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "tags.apps.TagsConfig",
    "rest_framework",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_spectacular",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project_tags.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project_tags.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
}

REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
